window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pycomptox", "modulename": "pycomptox", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycomptox.initialize_package", "modulename": "pycomptox", "qualname": "initialize_package", "kind": "function", "doc": "<p>Initialize the package with optional configuration.</p>\n\n<p>Args:\n    config (dict, optional): Configuration dictionary for package setup.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycomptox", "modulename": "pycomptox", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycomptox.apis", "modulename": "pycomptox.apis", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycomptox.apis.chem_details", "modulename": "pycomptox.apis.chem_details", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycomptox.apis.chem_details.ChemDetails", "modulename": "pycomptox.apis.chem_details", "qualname": "ChemDetails", "kind": "class", "doc": "<p>Client for API1.</p>\n", "bases": "pycomptox.core.base_client.BaseAPIClient"}, {"fullname": "pycomptox.apis.chem_details.ChemDetails.get_resource", "modulename": "pycomptox.apis.chem_details", "qualname": "ChemDetails.get_resource", "kind": "function", "doc": "<p>Fetch a specific resource.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">resource_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">query_params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search", "modulename": "pycomptox.apis.chem_search", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycomptox.apis.chem_search.ChemSearch", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemSearch", "kind": "class", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code> Client for Chemical search. This client provides methods to search chemicals based on various parameters.\n</code></pre>\n", "bases": "pycomptox.core.base_client.BaseAPIClient"}, {"fullname": "pycomptox.apis.chem_search.ChemSearch.__init__", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemSearch.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pycomptox.apis.chem_search.ChemSearch.get_chemical", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemSearch.get_chemical", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>Fetch chemical details based starting characters, exact match or substring of search word.\n</code></pre>\n\n<h4 id=\"input-parameters\">input parameters:</h4>\n\n<pre><code>- op: Operator to search chemical. Valid values are 'start-with', 'equal', 'contain'\n- word: DTXCID, DTXSID , CAS number, Inchl (starting 13 characters), URLencoded chemical name(starting characters).\n</code></pre>\n\n<h4 id=\"query-parameters\">Query Parameters:</h4>\n\n<pre><code>- top: Int32  -&gt; Number of records to return.\n  this will work only with 'start-with' and 'contain' operator\n- projection: String  -&gt; Default: chemicalsearchall\n  this will work only with 'equal' and 'contain' operator\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<pre><code>{\n    \"casrn\": \"string\",\n    \"dtxsid\": \"string\",\n    \"dtxcid\": \"string\",\n    \"preferredName\": \"string\",\n    \"hasStructureImage\": 0,\n    \"smiles\": \"string\",\n    \"isMarkush\": false,\n    \"searchName\": \"string\",\n    \"searchValue\": \"string\",\n    \"rank\": 0\n}\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = ChemSearch(api_key=api_key)\nkawrgs = {\"params\": {\"top\": 20}}\nresponse = client.get_chemical(op=\"contain\", word=\"95-16-9\")\n\nkwargs = {\"params\": {\"top\": 20, \"projection\": \"chemicalsearchall\"}\nresponse = client.get_chemical(op=\"contain\", word=\"95-16-9\", **kwargs)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">word</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.ChemSearch.ms_ready", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemSearch.ms_ready", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>Search ms ready chemicals based on mass range, formula or DTXCID.\n</code></pre>\n\n<h4 id=\"input-parameters\">input parameters:</h4>\n\n<pre><code>- op: Operator to search ms ready chemicals. Valid values are 'mass', 'formula', 'dtxcid'\n- word: formula or DTXCID\n- start: start mass value\n- end: end mass value\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<pre><code>[\n    \"string\"\n]\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = ChemSearch(api_key=api_key)\nresponse = client.ms_ready(op=\"mass\", start=200.9, end=200.95)\nresponse = client.ms_ready(op=\"formula\", word=\"C16H24N2O5S\")\nresponse = client.ms_ready(op=\"dtxcid\", word=\"DTXCID30182\")\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">word</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.ChemSearch.by_batch", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemSearch.by_batch", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>note : Search batch of values (values are separated by EOL character and maximum 200 values are allowed).\n</code></pre>\n\n<h4 id=\"input-parameters\">Input Parameters:</h4>\n\n<pre><code>- data_list: List of DTXCID or DTXSID\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<pre><code>{\n    \"casrn\": \"string\",\n    \"dtxsid\": \"string\",\n    \"dtxcid\": \"string\",\n    \"preferredName\": \"string\",\n    \"hasStructureImage\": 0,\n    \"smiles\": \"string\",\n    \"isMarkush\": false,\n    \"searchName\": \"string\",\n    \"searchValue\": \"string\",\n    \"rank\": 0\n}\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = ChemSearch(api_key=api_key)\nresponse = client.by_batch(data_list=[\"DTXCID30182\", \"DTXCID30182\"])\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_list</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.ChemSearch.by_mass_batch", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemSearch.by_mass_batch", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_list</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">query_params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.ChemFate", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemFate", "kind": "class", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code> Client for Chemical Fate search. This client provides methods to search chemicals batch of DTXIDS and single DTXID.\n</code></pre>\n", "bases": "pycomptox.core.base_client.BaseAPIClient"}, {"fullname": "pycomptox.apis.chem_search.ChemFate.__init__", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemFate.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pycomptox.apis.chem_search.ChemFate.get_dtxids_batch", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemFate.get_dtxids_batch", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>Fetch fate data for a batch of DTXSIDs . Maximum 1000 DTXSIDs are allowed in a single request.\n</code></pre>\n\n<h4 id=\"request-body\">request body:</h4>\n\n<pre><code>[\"string\"]\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<p>{\n    \"id\": 0,\n    \"valueType\": \"string\",\n    \"dtxsid\": \"string\",\n    \"dtxcid\": \"string\",\n    \"unit\": \"string\",\n    \"resultValue\": 0,\n    \"modelSource\": \"string\",\n    \"endpointName\": \"string\",\n    \"description\": \"string\",\n    \"minValue\": 0,\n    \"maxValue\": 0\n}</p>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = ChemFate(api_key=api_key)\nresponse = client.get_dtxids_batch(data_list=[\"DTXSID7020182\"], query_params={})\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_list</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.ChemFate.by_dtxsid", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemFate.by_dtxsid", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>    Fetch fate data for a DTXSID.\n</code></pre>\n\n<h4 id=\"path-parameter\">path parameter:</h4>\n\n<pre><code>    dtxsid: DTXSID\n</code></pre>\n\n<h4 id=\"query-parameters\">Query Parameters:</h4>\n\n<pre><code>    - None\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<pre><code>[\n{\n    \"id\": 0,\n    \"valueType\": \"string\",\n    \"dtxsid\": \"string\",\n    \"dtxcid\": \"string\",\n    \"unit\": \"string\",\n    \"resultValue\": 0,\n    \"modelSource\": \"string\",\n    \"endpointName\": \"string\",\n    \"description\": \"string\",\n    \"minValue\": 0,\n    \"maxValue\": 0\n}\n]\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = ChemFate(api_key=api_key)\nresponse = client.by_dtxsid(dtxsid=\"DTXSID7020182\")\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dtxsid</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">query_params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.ChemList", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemList", "kind": "class", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code> Client for Chemical List search. This client provides methods to search chemicals based on various parameters.\n</code></pre>\n", "bases": "pycomptox.core.base_client.BaseAPIClient"}, {"fullname": "pycomptox.apis.chem_search.ChemList.__init__", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemList.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pycomptox.apis.chem_search.ChemList.get_list_types", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemList.get_list_types", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>Fetch list types.\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<pre><code>[\n    \"string\"\n]\n\nSome of the values : ['federal', 'international', 'other', 'state']\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = ChemList(api_key=api_key)\nresponse = client.get_list_types()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.ChemList.get_public_list", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemList.get_public_list", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>Fetch public lists, based on the operator and value. The valid values for operator are \"name\" or \"type\".\n</code></pre>\n\n<h4 id=\"input-parameter\">Input parameter:</h4>\n\n<pre><code>- value: List Name or List Type.\n  e.g list types : ['federal', 'international', 'other', 'state']\n</code></pre>\n\n<h4 id=\"query-parameters\">Query Parameters:</h4>\n\n<pre><code>- projection : enum  -&gt; Default: chemicallistall\n  Allowed: chemicallistall \u2503 chemicallistwithdtxsids \u2503 chemicallistname \u2503 ccdchemicaldetaillists\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<pre><code>{\n    \"shortDescription\": \"string\",\n    \"id\": 0,\n    \"type\": \"string\",\n    \"longDescription\": \"string\",\n    \"visibility\": \"string\",\n    \"createdAt\": \"1970-01-01T00:00:00.000Z\",\n    \"chemicalCount\": 0,\n    \"listName\": \"string\",\n    \"updatedAt\": \"1970-01-01T00:00:00.000Z\",\n    \"label\": \"string\"\n}\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = ChemList(api_key=api_key)\nresponse = client.get_public_list(op=\"name\", value=\"40CFR1164\")\nkwargs = {\"params\": {\"projection\": \"chemicallistwithdtxsids\"}\nresponse = client.get_public_list(op=\"type\", value=\"other\", **kwargs)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.ChemList.get_chem_by_list", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemList.get_chem_by_list", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>Fetch chemicals based on list name and search word. This works for strating characters, exact match or substring of search DTXSID.\n</code></pre>\n\n<h4 id=\"input-parameters\">Input Parameters:</h4>\n\n<pre><code>- op: Operator to search chemical. Valid values are 'start-with', 'equal', 'contain'\n- list: List name\n- word: Search word (DTXSID)\n  No need to provide the search word for 'listname' operator.\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<pre><code>[\n    \"string\"\n]\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = ChemList(api_key=api_key)\nresponse = client.get_chem_by_list(op=\"start-with\", list=\"40CFR1164\", word=\"DTXSID10\")\nresponse = client.get_chem_by_list(op=\"equal\", list=\"40CFR1164\", word=\"DTXSID101015049\")\nresponse = client.get_chem_by_list(op=\"contain\", list=\"40CFR1164\", word=\"1015049\")\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">op</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"nb\">list</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">word</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.ChemList.get_all_public_lists", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemList.get_all_public_lists", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>Fetch all public lists.\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<pre><code>[\n   {\n     \"id\" : 819,\n     \"type\" : \"state\",\n     \"label\" : \"WATER: Regional Monitoring Program for Water Quality in San Francisco Bay\",\n     \"visibility\" : \"PUBLIC\",\n     \"longDescription\" : \"The Regional Monitoring Program for Water Quality in San\",\n     \"chemicalCount\" : 1084,\n     \"createdAt\" : \"2019-11-18T09:07:36Z\",\n     \"updatedAt\" : \"2019-11-18T09:10:30Z\",\n     \"listName\" : \"SFEIWATER\",\n     \"shortDescription\" : \"Chemicals monitored in the Regional Monitoring Program for Water Quality in San Francisco Bay (RMP)\"\n   }\n]\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = ChemList(api_key=api_key)\nresponse = client.get_all_public_lists()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.ChemDetails", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemDetails", "kind": "class", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code> Client for Chemical Details search. This client provides methods to search chemicals based on dtxsid or dtxcid.\n</code></pre>\n", "bases": "pycomptox.core.base_client.BaseAPIClient"}, {"fullname": "pycomptox.apis.chem_search.ChemDetails.__init__", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemDetails.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pycomptox.apis.chem_search.ChemDetails.get_chemical_details", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemDetails.get_chemical_details", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>Fetch chemical details based on DTXSID or DTXCID.\n</code></pre>\n\n<h4 id=\"input-parameters\">Input Parameters:</h4>\n\n<pre><code>- by: Operator to search chemical. Valid values are 'dtxsid', 'dtxcid'\n- word: DTXSID or DTXCID\n</code></pre>\n\n<h4 id=\"query-parameters\">Query Parameters:</h4>\n\n<pre><code>Projection: Default: None\n  Allowed: chemicaldetailstandard \u2503 chemicalidentifier \u2503 chemicalstructure \u2503 ntatoolkit \u2503 ccdchemicaldetails \u2503 chemicaldetailall \u2503 compact\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<pre><code>{\n    \"id\": \"string\",\n    \"qcLevelDesc\": \"string\",\n    \"qcLevel\": 0,\n    \"pubmedCount\": 0,\n    \"sourcesCount\": 0,\n    \"casrn\": \"string\",\n    \"activeAssays\": 0,\n    \"percentAssays\": 0,\n    \"pubchemCount\": 0,\n    \"dtxsid\": \"string\",\n    \"molFormula\": \"string\",\n    \"compoundId\": 0,\n    \"cpdataCount\": 0,\n    \"dtxcid\": \"string\",\n    \"preferredName\": \"string\",\n    \"relatedSubstanceCount\": 0,\n    \"wikipediaArticle\": \"string\",\n    \"relatedStructureCount\": 0,\n    \"descriptorStringTsv\": \"string\",\n    \"monoisotopicMass\": 0,\n    \"hasStructureImage\": 0,\n    \"genericSubstanceId\": 0,\n    \"toxcastSelect\": \"string\",\n    \"isotope\": 0,\n    \"pubchemCid\": 0,\n    \"multicomponent\": 0,\n    \"inchiString\": \"string\",\n    \"inchikey\": \"string\",\n    \"totalAssays\": 0,\n    \"iupacName\": \"string\",\n    \"smiles\": \"string\",\n    \"msReadySmiles\": \"string\",\n    \"qcNotes\": \"string\",\n    \"qsarReadySmiles\": \"string\",\n    \"pprtvLink\": \"string\",\n    \"irisLink\": \"string\",\n    \"isMarkush\": false\n}\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = ChemDetails(api_key=api_key)\nresponse = client.get_chemical_details(by=\"dtxsid\", word=\"DTXSID1020560\")\nresponse = client.get_chemical_details(by=\"dtxcid\", word=\"DTXCID505\")\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">by</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">word</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.ChemDetails.get_chemical_details_batch", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemDetails.get_chemical_details_batch", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>Fetch chemical details based on DTXSID or DTXCID in batch.\n</code></pre>\n\n<h4 id=\"input-parameters\">Input Parameters:</h4>\n\n<pre><code>- by: Operator to search chemical. Valid values are 'dtxsid', 'dtxcid'\n- data_list: List of DTXSID or DTXCID\n</code></pre>\n\n<h4 id=\"query-parameters\">Query Parameters:</h4>\n\n<pre><code>Projection: Default: None\n  Allowed: chemicaldetailstandard \u2503 chemicalidentifier \u2503 chemicalstructure \u2503 ntatoolkit \u2503 ccdchemicaldetails \u2503 chemicaldetailall \u2503 compact\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<pre><code>[{str, Any}]\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = ChemDetails(api_key=api_key)\nresponse = client.get_chemical_details_batch(by=\"dtxcid\", data_list=[\"DTXCID505\", \"DTXCID505\"])\nresponse = client.get_chemical_details_batch(by=\"dtxsid\", data_list=[\"DTXSID1020560\", \"DTXSID1020560\"])\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">by</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data_list</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.GHSClassExist", "modulename": "pycomptox.apis.chem_search", "qualname": "GHSClassExist", "kind": "class", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>This endpoint will return Y if Pubchem has GHS Safety data otherwise it will return N.\n</code></pre>\n", "bases": "pycomptox.core.base_client.BaseAPIClient"}, {"fullname": "pycomptox.apis.chem_search.GHSClassExist.__init__", "modulename": "pycomptox.apis.chem_search", "qualname": "GHSClassExist.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pycomptox.apis.chem_search.GHSClassExist.if_class_exist", "modulename": "pycomptox.apis.chem_search", "qualname": "GHSClassExist.if_class_exist", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>This endpoint will return Y if Pubchem has GHS Safety data otherwise it will return N.\n</code></pre>\n\n<h4 id=\"input-parameters\">Input Parameters:</h4>\n\n<pre><code>- dtx: DTXSID\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<pre><code>{\n\"dtxsid\": \"string\",\n\"isSafetyData\": false,\n\"safetyUrl\": \"string\"\n}\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = GHSClassExist(api_key=api_key)\nresponse = client.if_class_exist(dtx=\"DTXSID1020560\")\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dtx_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.GHSClassExist.if_class_exist_batch", "modulename": "pycomptox.apis.chem_search", "qualname": "GHSClassExist.if_class_exist_batch", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>Similar to if_class_exist but for batch of DTXSIDs.\n</code></pre>\n\n<h4 id=\"input-parameters\">Input Parameters:</h4>\n\n<pre><code>- dtx_id_list: List of DTXSIDs\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<pre><code>[\n    {\n        \"dtxsid\": \"string\",\n        \"isSafetyData\": false,\n        \"safetyUrl\": \"string\"\n    }\n]\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = GHSClassExist(api_key=api_key)\nresponse = client.if_class_exist_batch(dtx_id_list=[\"DTXSID1020560\"])\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dtx_id_list</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.SystemIUPAC", "modulename": "pycomptox.apis.chem_search", "qualname": "SystemIUPAC", "kind": "class", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>This endpoint returns smile code, InChlKey or InChl for a chemical name.\n</code></pre>\n", "bases": "pycomptox.core.base_client.BaseAPIClient"}, {"fullname": "pycomptox.apis.chem_search.SystemIUPAC.__init__", "modulename": "pycomptox.apis.chem_search", "qualname": "SystemIUPAC.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pycomptox.apis.chem_search.SystemIUPAC.get_iupac", "modulename": "pycomptox.apis.chem_search", "qualname": "SystemIUPAC.get_iupac", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>This endpoint returns smile code, InChlKey or InChi for a chemical name.\n</code></pre>\n\n<h4 id=\"input-parameters\">Input Parameters:</h4>\n\n<pre><code>- chem_name: Chemical Name\n- what: Valid values are 'smiles', 'inchikey', 'inchi'\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<pre><code>\"string\"\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = SystemIUPAC(api_key=api_key)\nresponse = client.get_iupac(chem_name=\"acetamide\", what=\"inchikey\")\nresponse = client.get_iupac(chem_name=\"acetamide\", what=\"inchi\")\nresponse = client.get_iupac(chem_name=\"acetamide\", what=\"smiles\")\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chem_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">what</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.ChemProperties", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemProperties", "kind": "class", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>Get Chemical properties.\n</code></pre>\n", "bases": "pycomptox.core.base_client.BaseAPIClient"}, {"fullname": "pycomptox.apis.chem_search.ChemProperties.__init__", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemProperties.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pycomptox.apis.chem_search.ChemProperties.get_properties", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemProperties.get_properties", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>Get Chemical properties.\n</code></pre>\n\n<h4 id=\"input-parameters\">Input Parameters:</h4>\n\n<pre><code>- by: Operator to search chemical. Valid values are 'propid', 'dtxsid', 'predicted', 'experimental'\n- params: Dict of parameters based on operator.\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<pre><code>When by = \"dtxsid\"\n\n[\n    {\n    \"name\": \"string\",\n    \"value\": 0,\n    \"id\": 0,\n    \"source\": \"string\",\n    \"dtxsid\": \"string\",\n    \"dtxcid\": \"string\",\n    \"unit\": \"string\",\n    \"propertyId\": \"string\",\n    \"propType\": \"string\",\n    \"description\": \"string\"\n    }\n]\n\nwhen by = \"experimental\" or \"predicted\"\n[\n    {\n    \"name\": \"string\",\n    \"propertyId\": \"string\",\n    \"propType\": \"string\"\n    }\n]\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = ChemProperties(api_key=api_key)\nresponse = client.get_properties(by=\"dtxsid\", params = {\"dtxsid\": \"DTXSID7020182\"})\nresponse = client.get_properties(by=\"propid\", params={\"propertyid\": \"density\", \"start\": 1.311, \"end\": 1.313})\nresponse = client.get_properties(by=\"experimental\")\nresponse = client.get_properties(by=\"predicted\")\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">by</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.ChemProperties.get_properties_batch", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemProperties.get_properties_batch", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>Get Chemical properties in batch.\n</code></pre>\n\n<h4 id=\"input-parameters\">Input Parameters:</h4>\n\n<pre><code>- dtxsid_list: List of DTXSIDs\n</code></pre>\n\n<h4 id=\"output-schema\">Output Schema:</h4>\n\n<pre><code>[\n    {\n    \"name\": \"string\",\n    \"value\": 0,\n    \"id\": 0,\n    \"source\": \"string\",\n    \"dtxsid\": \"string\",\n    \"dtxcid\": \"string\",\n    \"unit\": \"string\",\n    \"propertyId\": \"string\",\n    \"propType\": \"string\",\n    \"description\": \"string\"\n    }\n]\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>client = ChemProperties(api_key=api_key)\nresponse = client.get_properties_batch(dtxsid_list=[\"DTXSID7020182\"])\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dtxsid_list</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.apis.chem_search.IndigoService", "modulename": "pycomptox.apis.chem_search", "qualname": "IndigoService", "kind": "class", "doc": "<h4 id=\"description\">Description:</h4>\n", "bases": "pycomptox.core.base_client.BaseAPIClient"}, {"fullname": "pycomptox.apis.chem_search.IndigoService.__init__", "modulename": "pycomptox.apis.chem_search", "qualname": "IndigoService.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pycomptox.apis.chem_search.ChemFile", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemFile", "kind": "class", "doc": "<p>Base client for interacting with HTTP APIs.</p>\n", "bases": "pycomptox.core.base_client.BaseAPIClient"}, {"fullname": "pycomptox.apis.chem_search.ChemFile.__init__", "modulename": "pycomptox.apis.chem_search", "qualname": "ChemFile.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pycomptox.apis.chem_search.Synonyms", "modulename": "pycomptox.apis.chem_search", "qualname": "Synonyms", "kind": "class", "doc": "<p>Base client for interacting with HTTP APIs.</p>\n", "bases": "pycomptox.core.base_client.BaseAPIClient"}, {"fullname": "pycomptox.apis.chem_search.Synonyms.__init__", "modulename": "pycomptox.apis.chem_search", "qualname": "Synonyms.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pycomptox.apis.hazard", "modulename": "pycomptox.apis.hazard", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycomptox.apis.hazard.Hazard", "modulename": "pycomptox.apis.hazard", "qualname": "Hazard", "kind": "class", "doc": "<p>Base client for interacting with HTTP APIs.</p>\n", "bases": "pycomptox.core.base_client.BaseAPIClient"}, {"fullname": "pycomptox.apis.hazard.Hazard.__init__", "modulename": "pycomptox.apis.hazard", "qualname": "Hazard.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pycomptox.apis.hazard.Hazard.get_hazard", "modulename": "pycomptox.apis.hazard", "qualname": "Hazard.get_hazard", "kind": "function", "doc": "<h4 id=\"description\">Description:</h4>\n\n<pre><code>Fetch hazard information for a specific chemical.\n</code></pre>\n\n<h4 id=\"arguments\">Arguments:</h4>\n\n<pre><code>- type: str\n    - The type of hazard to fetch. Must be one of 'human', 'eco', or 'all'.\n- dtxsid: str\n    - The DTXSID of the chemical to fetch hazard information for.\n- kwargs: Dict\n    - Additional arguments to pass to the request.\n</code></pre>\n\n<h4 id=\"returns\">Returns:</h4>\n\n<pre><code>- Dict: The JSON response from the API.\n    {\n        \"id\": 0,\n        \"source\": \"string\",\n        \"year\": \"string\",\n        \"studyDurationValue\": 0,\n        \"studyDurationClass\": \"string\",\n        \"toxvalNumericQualifier\": \"string\",\n        \"studyDurationUnits\": \"string\",\n        \"riskAssessmentClass\": \"string\",\n        \"dtxsid\": \"string\",\n        \"exposureRoute\": \"string\",\n        \"toxvalNumeric\": 0,\n        \"subsource\": \"string\",\n        \"toxvalType\": \"string\",\n        \"toxvalSubtype\": \"string\",\n        \"toxvalUnits\": \"string\",\n        \"studyType\": \"string\",\n        \"sourceUrl\": \"string\",\n        \"subsourceUrl\": \"string\",\n        \"priorityId\": 0,\n        \"criticalEffect\": \"string\",\n        \"generation\": \"string\",\n        \"exposureMethod\": \"string\",\n        \"detailText\": \"string\",\n        \"population\": \"string\",\n        \"strain\": \"string\",\n        \"media\": \"string\",\n        \"sex\": \"string\",\n        \"exposureForm\": \"string\",\n        \"lifestage\": \"string\",\n        \"supercategory\": \"string\",\n        \"speciesCommon\": \"string\",\n        \"humanEcoNt\": \"string\"\n    }\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code><div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Hazard</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">api_key</span><span class=\"p\">)</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_hazard</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">&quot;eco&quot;</span><span class=\"p\">,</span> <span class=\"n\">dtxsid</span><span class=\"o\">=</span><span class=\"s2\">&quot;DTXSID1020560&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dtxsid</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.core", "modulename": "pycomptox.core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycomptox.core.base_client", "modulename": "pycomptox.core.base_client", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycomptox.core.base_client.conf", "modulename": "pycomptox.core.base_client", "qualname": "conf", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;pycomptox.core.config.Config object&gt;"}, {"fullname": "pycomptox.core.base_client.BaseAPIClient", "modulename": "pycomptox.core.base_client", "qualname": "BaseAPIClient", "kind": "class", "doc": "<p>Base client for interacting with HTTP APIs.</p>\n"}, {"fullname": "pycomptox.core.base_client.BaseAPIClient.__init__", "modulename": "pycomptox.core.base_client", "qualname": "BaseAPIClient.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pycomptox.core.base_client.BaseAPIClient.base_url", "modulename": "pycomptox.core.base_client", "qualname": "BaseAPIClient.base_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycomptox.core.base_client.BaseAPIClient.api_key", "modulename": "pycomptox.core.base_client", "qualname": "BaseAPIClient.api_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycomptox.core.base_client.BaseAPIClient.get", "modulename": "pycomptox.core.base_client", "qualname": "BaseAPIClient.get", "kind": "function", "doc": "<p>Make a GET request to the given endpoint with optional query parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>endpoint</strong>:  The endpoint (e.g., '/data/resource')</li>\n<li><strong>headers</strong>:  Optional headers for the request</li>\n<li><strong>params</strong>:  Optional query parameters for the GET request</li>\n<li><strong>kwargs</strong>:  Additional arguments to pass to the request</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The JSON response from the API.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">endpoint</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">headers</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.core.base_client.BaseAPIClient.post", "modulename": "pycomptox.core.base_client", "qualname": "BaseAPIClient.post", "kind": "function", "doc": "<p>Make a POST request to the given endpoint with optional data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>endpoint</strong>:  The endpoint (e.g., '/data/resource')</li>\n<li><strong>headers</strong>:  Optional headers for the request</li>\n<li><strong>params</strong>:  Optional query parameters for the GET request</li>\n<li><strong>kwargs</strong>:  Additional arguments to pass to the request</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">endpoint</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">headers</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.core.base_client.BaseAPIClient.put", "modulename": "pycomptox.core.base_client", "qualname": "BaseAPIClient.put", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">endpoint</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">headers</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycomptox.core.config", "modulename": "pycomptox.core.config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycomptox.core.config.Config", "modulename": "pycomptox.core.config", "qualname": "Config", "kind": "class", "doc": "<p>Configuration manager for API wrapper.</p>\n"}, {"fullname": "pycomptox.core.config.Config.__init__", "modulename": "pycomptox.core.config", "qualname": "Config.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">base_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pycomptox.core.config.Config.api_key", "modulename": "pycomptox.core.config", "qualname": "Config.api_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycomptox.core.config.Config.base_url", "modulename": "pycomptox.core.config", "qualname": "Config.base_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pycomptox.utils", "modulename": "pycomptox.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycomptox.utils.exceptions", "modulename": "pycomptox.utils.exceptions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycomptox.utils.exceptions.APIRequestError", "modulename": "pycomptox.utils.exceptions", "qualname": "APIRequestError", "kind": "class", "doc": "<p>Raised when an API request fails.</p>\n", "bases": "builtins.Exception"}, {"fullname": "pycomptox.utils.exceptions.APIRequestError.__init__", "modulename": "pycomptox.utils.exceptions", "qualname": "APIRequestError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pycomptox.utils.logging_utils", "modulename": "pycomptox.utils.logging_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycomptox.utils.logging_utils.setup_logger", "modulename": "pycomptox.utils.logging_utils", "qualname": "setup_logger", "kind": "function", "doc": "<p>Set up a logger with a specific name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();